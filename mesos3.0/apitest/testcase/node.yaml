# Test using included Django test app
# First install python-django
# Then launch the app in another terminal by doing
#   cd testapp
#   python manage.py testserver test_data.json
# Once launched, tests can be executed via:
# 	python resttest.py http://localhost:8000 miniapp-test.yaml

---
- config:
    - testset: "Tests using test app"
    - variable_binds: {email: 'admin@dataman-inc.com', password: "Dataman1234", testpasswd: "Dataman12345", testpasswd1: "Dataman123456" ,wrongpassword: "Daaaaaaaaaa" }
    - generators:  
        - 'test': {type: 'random_int'}

- test: # valid login
    - name: "Normal login"
    - url: "/v1/login"
    - method: "post"
    - body: {template: '{"email": "$email","password": "$password"}'}
    - headers: {Content-Type: application/json}
    - expected_status: [200]
    - validators: # operator is applied as: <actual> <operator> <expected>
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "length_eq", expected: 32}
    - extract_binds:
        - 'token': {'jmespath': 'data'}

- test:
    - name: "Normal get node list"
    - url: "/v1/nodes"
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.masters[*].id)", comparator: "gt", expected: 0}
        - compare: {jmespath: "length(data.slaves[*].id)", comparator: "gt", expected: 0 }
    - extract_binds: 
        - 'node_ip': {jmespath: 'data.slaves[0].ip'}
- test:
    - name: "Normal get metrics info"
    - url: "/v1/metrics/snapshot"
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data)", comparator: "gt", expected: 0}

- test:
    - name: "Normal get node info "
    - url: {template: "/v1/nodes/$node_ip/info"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.ID)", comparator: "gt", expected: 0}
        - compare: {jmespath: "length(data.Driver)", comparator: "gt", expected: 0}

- test:
    - name: "Abnormal get node info "
    - url: "/v1/nodes/1.1.1.1/info"
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [404]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 23009}
        - compare: {jmespath: "data", comparator: "str_eq", expected: "The node is not exist."}

- test:
    - name: "Normal get instances list"
    - url: {template: "/v1/nodes/$node_ip/instances"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Id)", comparator: "gt", expected: 0}
        - compare: {jmespath: "length(data[*].Image)", comparator: "gt", expected: 0 }
    - extract_binds:
        - 'instances_id': {jmespath: "data[0].Id"}

- test:
    - name: "Abnormal get instances list "
    - url: "/v1/nodes/1.1.1.1/instances"
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [404]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 23009}
        - compare: {jmespath: "data", comparator: "str_eq", expected: "The node is not exist."}

- test:
    - name: "Normal get images "
    - url: {template: "/v1/nodes/$node_ip/images"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Id)", comparator: "gt", expected: 0}
        - compare: {jmespath: "length(data[*].RepoTags)", comparator: "gt", expected: 0}
        - compare: {jmespath: "data[*].Created", comparator: "gt", expected: 0}
        - compare: {jmespath: "data[*].Size", comparator: "gt", expected: 0}
        - compare: {jmespath: "data[*].VirtualSize", comparator: "gt", expected: 0}

- test:
    - name: "Normal get instances info"
    - url: {template: "/v1/nodes/$node_ip/instances/$instances_id/info"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Id)", comparator: "gt", expected: 0}
        - compare: {jmespath: "length(data.Created)", comparator: "gt", expected: 0}

- test:
    - name: "Abnormal get instances info"
    - url: {template: "/v1/nodes/$node_ip/instances/999999999/info"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [404]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 23008}
        - compare: {jmespath: "data", comparator: "contains", expected: "No such container"}
