# Test using included Django test app
# First install python-django
# Then launch the app in another terminal by doing
#   cd testapp
#   python manage.py testserver test_data.json
# Once launched, tests can be executed via:
# 	python resttest.py http://localhost:8000 miniapp-test.yaml

---
- config:
    - testset: "Tests using test app"
    - variable_binds: {Email: 'admin@admin.com', Password: "adminadmin"}

- test: # 正常测试登录获取token
    - name: "Normal login"
    - url: "/account/v1/login"
    - method: "post"
    - body: {template: '{"Email": "$Email","Password": "$Password"}'}
    - headers: {Content-Type: application/json}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "length_eq", expected: 32}
    - extract_binds:
        - 'token': {'jmespath': 'data'}

- test: # 异常测试，输入错误帐号密码，登录获取token
    - name: "Abnormal login"
    - url: "/account/v1/login"
    - method: "post"
    - body: {template: '{"Email": "Email","Password": "Password"}'}
    - headers: {Content-Type: application/json}
    - expected_status: [503]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 10001}
        - compare: {jmespath: "message", comparator: "contains", expected: "account login failed"}

- test: # 正常获取主机列表
    - name: "获取主机列表"
    - url: "/api/v1/nodes"
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].ID)", comparator: "gt", expected: 0}
    - extract_binds:
        - 'node_id': {'jmespath': 'data[0].ID'}

- test: # 异常获取主机列表 token错误
    - name: "获取主机列表"
    - url: "/api/v1/nodes"
    - method: "get"
    - headers: {template: {Authorization: token}}
    - expected_status: [401]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 12033}
        - compare: {jmespath: "message", comparator: "contains", expected: "Invalid Authorization"}

- test: # 正常获取主机信息
    - name: "正常获取主机信息"
    - url: {template: "/api/v1/nodes/$node_id/info"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.ID)", comparator: "gt", expected: 0}

- test: 
    - name: "异常获取主机信息 node_id 不存在"
    - url: {template: "/api/v1/nodes/node_id/info"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [503]
    - validators::
        - compare: {jmespath: "code", comparator: "eq", expected: 11702}
        - compare: {jmespath: "message", comparator: "contains", expected: "not found"}

- test: # 正常获取主机的容器列表
    - name: "正常获取主机的容器列表"
    - url: {template: "/api/v1/nodes/$node_id/containers"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Id)", comparator: "gt", expected: 0}
    - extract_binds:
        - 'container_id': {'jmespath': 'data[0].Id'}

- test: 
    - name: "异常获取主机的容器列表 node_id 不存在"
    - url: {template: "/api/v1/nodes/node_id/containers"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [503]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 11702}
        - compare: {jmespath: "message", comparator: "contains", expected: "not found"}

- test: 
    - name: "获取指定节点上的network "
    - url: {template: "/api/v1/nodes/$node_id/networks"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Id)", comparator: "gt", expected: 0}

- test: 
    - name: "异常获取指定节点上的network  node_id 不存在"
    - url: {template: "/api/v1/nodes/node_id/networks"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [503]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 11702}
        - compare: {jmespath: "message", comparator: "contains", expected: "not found"}

- test: 
    - name: "正常在相应节点上创建集群网络"
    - url: {template: "/api/v1/nodes/$node_id/networks"}
    - method: "post"
    - headers: {template: {Authorization: $token}}
    - body: {template: '{"Name":"string","CheckDuplicate":true,"Driver":"overlay","IPAM":{"Driver":"default","Config":[],"Options":{},"Labels":{},"Internal":true,"EnableIPv6":true}}'}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Id)", comparator: "gt", expected: 0}
    - extract_binds:
        - 'network_id': {'jmespath': 'data.Id'}

- test: 
    - name: "正常获取网络详细信息"
    - url: {template: "/api/v1/nodes/$node_id/networks/$network_id"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Name)", comparator: "gt", expected: 0}

- test: 
    - name: "获取manager节点上所有的网络"
    - url: {template: "/api/v1/networks"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Name)", comparator: "gt", expected: 0}

- test: 
    - name: "正常在manager节点上创建集群网络"
    - url: {template: "/api/v1/networks"}
    - method: "post"
    - headers: {template: {Authorization: $token}}
    - body: {template: '{"Name":"string1","CheckDuplicate":true,"Driver":"overlay","IPAM":{"Driver":"default","Config":[],"Options":{},"Labels":{},"Internal":true,"EnableIPv6":true}}'}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Id)", comparator: "gt", expected: 0}
    - extract_binds:
        - 'network_id1': {'jmespath': 'data.Id'}

- test: 
    - name: "正常获取获取网络详细信息"
    - url: {template: "/api/v1/networks/$network_id"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Name)", comparator: "gt", expected: 0}

- test: 
    - name: "正常删除manager节点集群网络"
    - url: {template: "/api/v1/networks/$network_id"}
    - method: "delete"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "remove succsee"}

- test: 
    - name: "正常删除manager节点集群网络"
    - url: {template: "/api/v1/networks/$network_id1"}
    - method: "delete"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "remove succsee"}

- test: 
    - name: "正常获取节点上所有的镜像"
    - url: {template: "/api/v1/nodes/$node_id/images"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Id)", comparator: "gt", expected: 0}
    - extract_binds:
        - 'image_id': {'jmespath': 'data[0].Id'}

- test: 
    - name: "正常获取节点上镜像信息"
    - url: {template: "/api/v1/nodes/$node_id/images/$image_id"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Id)", comparator: "gt", expected: 0}

- test: 
    - name: "正常获取镜像历史记录"
    - url: {template: "/api/v1/nodes/$node_id/images/$image_id/history"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Id)", comparator: "gt", expected: 0}

- test: 
    - name: "正常删除镜像"
    - url: {template: "/api/v1/nodes/$node_id/images/$image_id"}
    - method: "delete"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "success"}

- test: 
    - name: "正常创建存储卷"
    - url: {template: "/api/v1/nodes/$node_id/volumes"}
    - method: "post"
    - headers: {template: {Authorization: $token}}
    - body: {template: '{"Driver":"local","Labels":{},"Name":"test"}'}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Name)", comparator: "gt", expected: 0}
    - extract_binds:
        - 'volume_id': {'jmespath': 'data.Name'}


- test: 
    - name: "正常获取节点上所有的存储卷"
    - url: {template: "/api/v1/nodes/$node_id/volumes"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].Name)", comparator: "gt", expected: 0}

- test: 
    - name: "正常获取节点上的指定储存卷"
    - url: {template: "/api/v1/nodes/$node_id/volumes/$volume_id"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Name)", comparator: "gt", expected: 0}

- test: 
    - name: "正常删除储存卷"
    - url: {template: "/api/v1/nodes/$node_id/volumes/$volume_id"}
    - method: "delete"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: success}

- test: 
    - name: "正常获取平台信息"
    - url: {template: "/misc/v1/config"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Version)", comparator: "gt", expected: 0}

- test: 
    - name: "正常搜索"
    - url: {template: "/search/v1/luckysearch?keyword=l"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data[*].ID)", comparator: "gt", expected: 0}

- test: 
    - name: "正常获取当前用户信息"
    - url: {template: "/account/v1/aboutme"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.Email)", comparator: "gt", expected: 0}

- test: 
    - name: "正常创建一个应用, 一个应用可包含多个服务"
    - url: {template: "/api/v1/stacks"}
    - method: "post"
    - headers: {template: {Authorization: $token}}
    - body: {template: '{"Namespace":"dddd","Stack":{"Version":"1","Services":{"mysql":{"Name":"mysql","Labels":{"name":"mysql"},"TaskTemplate":{"ContainerSpec":{"Image":"mysql","Labels":{"name":"mysql"},"Env":["MYSQL_ROOT_PASSWORD=111111"],"User":"root"},"RestartPolicy":{"Condition":"none","Delay":3000000000,"MaxAttempts":1,"Window":3000000000},"LogDriver":{"Name":"json-file"}},"Mode":{"Replicated":{"Replicas":1}},"UpdateConfig":null,"Networks":["ingress"],"EndpointSpec":{"Mode":"vip"}},"mywebsql":{"Name":"mywebsql","Labels":{"mywebsql":"mywebsql"},"TaskTemplate":{"ContainerSpec":{"Image":"quantumobject/docker-mywebsql","Labels":{"name":"mywebsql"},"User":"root"},"RestartPolicy":{"Condition":"none","Delay":3000000000,"MaxAttempts":1,"Window":3000000000},"LogDriver":{"Name":"json-file"}},"Mode":{"Replicated":{"Replicas":1}},"UpdateConfig":null,"Networks":["ingress"],"EndpointSpec":{"Mode":"vip","Ports":[{"Name":"testport","Protocol":"tcp","TargetPort":80,"PublishedPort":8000}]}}}}}'}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "success"}

- test: 
    - name: "查询指定应用以及应用包含所有服务的信息"
    - url: {template: "/api/v1/stacks/dddd"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}

- test: 
    - name: "获取应用上所有的服务"
    - url: {template: "/api/v1/stacks/dddd/services"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
    - extract_binds:
        - 'service_id': {'jmespath': 'data[0].ID'}

- test: 
    - name: "获取应用上指定的服务"
    - url: {template: "/api/v1/stacks/dddd/services/$service_id"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [209]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "length(data.ID)", comparator: "gt", expected: 0}

- test: 
    - name: "修改任务数"
    - url: {template: "/api/v1/stacks/dddd/services/$service_id"}
    - method: "patch"
    - headers: {template: {Authorization: $token}}
    - body: {template: '{"NumTasks":2}'}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "success"}

- test: 
    - name: "获取应用上的服务的任务列表"
    - url: {template: "/api/v1/stacks/dddd/services/$service_id/tasks"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data[*].ID", comparator: "gt", expected: 0}

- test: 
    - name: "获取应用上的服务的持续集成链接"
    - url: {template: "/api/v1/stacks/dddd/services/$service_id/cd_url"}
    - method: "get"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "gt", expected: 0}

- test: 
    - name: "更新应用上指定的服务"
    - url: {template: "/api/v1/stacks/dddd/services/$service_id"}
    - method: "put"
    - headers: {template: {Authorization: $token}}
    - body: {template: '{"Name":"mywebsql","Labels":{"mywebsql":"mywebsql"},"TaskTemplate":{"ContainerSpec":{"Image":"quantumobject/docker-mywebsql","Labels":{"name":"mywebsql"},"User":"root"},"RestartPolicy":{"Condition":"none","Delay":3000000001,"MaxAttempts":1,"Window":3000000000},"LogDriver":{"Name":"json-file"}},"Mode":{"Replicated":{"Replicas":1}},"UpdateConfig":null,"Networks":["ingress"],"EndpointSpec":{"Mode":"vip","Ports":[{"Name":"testport","Protocol":"tcp","TargetPort":80,"PublishedPort":8000}]}}'}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "success"}

- test: 
    - name: "正常登出用户"
    - url: {template: "/account/v1/logout"}
    - method: "post"
    - headers: {template: {Authorization: $token}}
    - expected_status: [200]
    - validators:
        - compare: {jmespath: "code", comparator: "eq", expected: 0}
        - compare: {jmespath: "data", comparator: "contains", expected: "success"}











